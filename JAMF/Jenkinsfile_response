pipeline {
    agent any

    environment {
        SECRET_ID = 'your_secret_id'
        SECRET_KEY = 'your_secret_key'
        JAMF_URL = 'https://dummy.jamfcloud.com'
    }

    stages {
        stage('Get Access Token') {
            steps {
                script {
                    def response = httpRequest(
                        acceptType: 'APPLICATION_JSON',
                        contentType: 'APPLICATION_JSON',
                        httpMode: 'POST',
                        url: "${env.JAMF_URL}/get-access-token",
                        requestBody: "{\"secretId\": \"${env.SECRET_ID}\", \"secretKey\": \"${env.SECRET_KEY}\"}"
                    )
                    
                    if (response.status == 200) {
                        def accessToken = response.getData().access_token
                        echo "Access Token: ${accessToken}"
                        
                        // Fetch data using the access token
                        fetchData(accessToken)
                    } else {
                        error "Failed to obtain access token: ${response.status}"
                    }
                }
            }
        }
    }
    
    // Function to fetch data using access token
    def fetchData(accessToken) {
        stage('Fetch Data') {
            steps {
                script {
                    def fetchDataResponse = httpRequest(
                        acceptType: 'APPLICATION_JSON',
                        contentType: 'APPLICATION_JSON',
                        httpMode: 'GET',
                        url: "${env.JAMF_URL}/cloud-azure/id",
                        headers: [Authorization: "Bearer ${accessToken}"]
                    )
                    
                    if (fetchDataResponse.status == 200) {
                        def data = fetchDataResponse.getData()
                        echo "Fetched Data: ${data}"
                    } else {
                        error "Failed to fetch data: ${fetchDataResponse.status}"
                    }
                }
            }
        }
    }
}
